# -*- coding: utf-8 -*-
"""Copy of Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EVnmB5tJftaqmbnTTXj0mFopK1hEjXgB
"""

from google.colab import drive
drive.mount("/content/drive")

import cv2
import os
import numpy as np
import torch
from diffusers import StableDiffusionInpaintPipeline
from PIL import Image
import matplotlib.pyplot as plt

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/ultralytics/yolov5.git
# %cd yolov5
!pip install -r requirements.txt

!python train.py \
--img 640 \
--batch 16 \
--epochs 200 \
--data /content/drive/MyDrive/dataset.yaml \
--project /content/drive/MyDrive/yolo \
--name clutter_detection \
--hyp /content/drive/MyDrive/yolo/clutter_detection2/hyp_evolve.yaml \
--cache ram \
--weights yolov5l.pt \
--patience 20 \
--save-period 5 \
--bbox_interval 200 \
--upload_dataset "train"
# --resume /content/drive/MyDrive/yolo/clutter_detection/weights/last.pt

!ls /content/drive/MyDrive/yolo/clutter_detection6/weights/

source = '/content/drive/MyDrive/images/test/images/'
masks = '/content/drive/MyDrive/images/test/masks/'
inpainted = '/content/drive/MyDrive/images/test/inpainted/'

model = torch.hub.load('ultralytics/yolov5', 'custom', force_reload=True, path='/content/drive/MyDrive/yolo/clutter_detection6/weights/best.pt')

def generate_masks():
  for i in os.listdir(source):
    results = model(source + i)
    # results.show()

    image = cv2.imread(source + i)
    mask = np.zeros(image.shape[:2], dtype=np.uint8)


    df = results.pandas().xyxy[0]
    # print(df)

    for x in range(df.shape[0]):
      x1, y1, x2, y2 = df.iloc[x, :4].astype(int)
      cv2.rectangle(mask, (x1, y1), (x2, y2), 255, thickness=-1)

    output = masks + i.replace('.png', '_mask.png')
    cv2.imwrite(output, mask)

generate_masks()

pipe = StableDiffusionInpaintPipeline.from_pretrained("stabilityai/stable-diffusion-2-inpainting",torch_dtype=torch.float16).to("cuda")


def inpaint(prompt=''):
  for i in os.listdir(source):
    image_path = source + i
    mask_path = masks + i.replace('.png', '_mask.png')

    image = Image.open(image_path).convert("RGB")
    mask = Image.open(mask_path).convert("RGB")

    result = pipe(prompt=prompt, image=image, mask_image=mask).images[0]

    result.save(inpainted + i.replace('.png', '_inpainted.png'))

inpaint("remove every object that isn't furniture or wall or ceiling; clean it up")

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt

def visualize_results():
  for i in os.listdir(source):
    image_path = source + i
    mask_path = masks + i.replace('.png', '_mask.png')
    inpainted_path = inpainted + i.replace('.png', '_inpainted.png')

    image = Image.open(image_path)
    mask = Image.open(mask_path)
    inpaint = Image.open(inpainted_path)

    plt.figure(figsize=(15, 5))
    plt.subplot(1, 3, 1)
    plt.title("Original")
    plt.imshow(image)
    plt.axis("off")

    plt.subplot(1, 3, 2)
    plt.title("Mask")
    plt.imshow(mask, cmap="gray")
    plt.axis("off")

    plt.subplot(1, 3, 3)
    plt.title("Inpainted")
    plt.imshow(inpaint)
    plt.axis("off")

    plt.show()

visualize_results()